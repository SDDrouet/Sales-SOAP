@model List<Entities.Users>

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Gestionar Usuarios</title>
    <style>
        /* Reset de márgenes y padding */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Body */
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            background-color: #f4f4f4;
            color: #333;
            padding: 20px;
        }

        /* Contenedor principal */
        div {
            margin: 20px 0;
        }

        /* Estilos de encabezados */
        h1, h2 {
            color: #333;
            margin-bottom: 15px;
        }

        /* Estilo para formularios */
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

            form div {
                margin-bottom: 15px;
            }

            form label {
                display: block;
                font-weight: bold;
                margin-bottom: 5px;
            }

            form input, form select, form button {
                width: 100%;
                padding: 10px;
                font-size: 1rem;
                border: 1px solid #ddd;
                border-radius: 4px;
            }

            form button {
                background-color: #007bff;
                color: #fff;
                border: none;
                cursor: pointer;
            }

                form button:hover {
                    background-color: #0056b3;
                }

        /* Estilo para botones */
        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            button:hover {
                background-color: #0056b3;
            }

        /* Estilo para las tablas */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #f4f4f4;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* Navegación */
        nav ul {
            list-style: none;
            padding: 0;
        }

            nav ul li {
                display: inline;
                margin-right: 20px;
            }

                nav ul li a {
                    text-decoration: none;
                    color: #007bff;
                    font-weight: bold;
                }

                    nav ul li a:hover {
                        text-decoration: underline;
                    }

        /* Mensajes de éxito / error */
        p.success, p.error {
            font-size: 1.2rem;
            margin-top: 20px;
            text-align: center;
        }

        p.success {
            color: green;
        }

        p.error {
            color: red;
        }

        /* Estilo para el centro de la página (verificación) */
        div[style="text-align: center; margin-top: 50px;"] {
            margin-top: 50px;
            text-align: center;
        }

        /* Botón de cierre de sesión */
        #logoutButton, #homebtn {
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            cursor: pointer;
            margin-top: 20px;
        }

            #logoutButton:hover, #homebtn:hover {
                background-color: #d32f2f;
            }

        /* Ajustes para formularios con estilos condicionales */
        input:focus, select:focus, button:focus {
            outline: none;
            border-color: #007bff;
        }

        /* Ajustes para el login */
        #loginForm input[type="submit"] {
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px;
            cursor: pointer;
        }

            #loginForm input[type="submit"]:hover {
                background-color: #218838;
            }

        #loginForm div {
            margin-bottom: 15px;
        }

        #loginForm input {
            width: 100%;
            padding: 10px;
        }

        /* Estilos para el formulario de actualización de usuario */
        #updateUserForm {
            display: none;
        }

        /* Estilo de enlace */
        a {
            color: #007bff;
            text-decoration: none;
        }

            a:hover {
                text-decoration: underline;
            }
    </style>
</head>
<body>
    <!-- Botón para cerrar sesión -->
    <button id="homebtn">Regresar a Inicio</button>

    <h1>Gestionar Usuarios</h1>

    <!-- Crear nuevo usuario -->
    <h2>Crear Nuevo Usuario</h2>
    <form id="createUserForm">
        <div>
            <label>Nombre de Usuario:</label>
            <input type="text" id="username" required />
        </div>

        <div>
            <label>Contraseña:</label>
            <input type="password" id="password" required />
        </div>

        <div>
            <label>Email:</label>
            <input type="email" id="email" required />
        </div>

        <div>
            <label for="rol">Rol:</label>
            <select id="rol" required>
                <option value="ADMIN">ADMIN</option>
                <option value="EDITOR">EDITOR</option>
                <option value="VIEWER">VIEWER</option>
            </select>
        </div>

        <button type="submit">Crear Usuario</button>
    </form>

    <hr />

    <!-- Actualizar usuario -->
    <h2>Actualizar Usuario</h2>
    <form id="updateUserForm" style="display:none;">
        <div>
            <label>Nombre de Usuario:</label>
            <input type="text" id="updateUsername" required />
        </div>

        <div>
            <label>Email:</label>
            <input type="email" id="updateEmail" required />
        </div>

        <div>
            <label for="rol">Rol:</label>
            <select id="updateRol" required>
                <option value="ADMIN">ADMIN</option>
                <option value="EDITOR">EDITOR</option>
                <option value="VIEWER">VIEWER</option>
            </select>
        </div>

        <button type="submit">Actualizar Usuario</button>
    </form>

    <hr />

    <!-- Listar usuarios -->
    <h2>Lista de Usuarios</h2>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre de Usuario</th>
                <th>Email</th>
                <th>Rol</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Count > 0)
            {
                foreach (var user in Model)
                {
                    <tr>
                        <td>@user.id</td>
                        <td>@user.username</td>
                        <td>@user.email</td>
                        <td>@user.rol</td>
                        <td>@(user.status == 1 ? "Activo" : "Inactivo")</td>
                        <td>
                            <!-- Editar usuario -->
                            <button onclick="fillUpdateForm(@user.id, '@user.username', '@user.email', '@user.rol')">Actualizar</button>

                            <!-- Cambiar estado del usuario -->
                            <button onclick="toggleStatus(@user.id, @(user.status == 1 ? 0 : 1))">
                                @(user.status == 1 ? "Desactivar" : "Activar")
                            </button>

                            <!-- Eliminar usuario -->
                            <button onclick="deleteUser(@user.id)">Eliminar</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">No hay usuarios disponibles</td>
                </tr>
            }

        </tbody>
    </table>

    <hr />

    <script>
        const authToken = sessionStorage.getItem('authToken');

        function sessionControl() {
            if (authToken == null || authToken == "") {
                window.location.href = '/';
            }
        }

        document.addEventListener('DOMContentLoaded', sessionControl);

        async function sendRequest(url, method, data = null) {
            const headers = {
                'Content-Type': 'application/json',
                'Authorization': authToken ? 'Bearer ' + authToken : ''
            };

            const options = {
                method: method,
                headers: headers
            };

            if (data) {
                options.body = JSON.stringify(data);
            }

            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    throw new Error('Error al realizar la solicitud');
                }
                return await response.json();
            } catch (error) {
                console.error('Error al realizar la solicitud:', error);
                alert(error.message);
                return null;
            }
        }

        async function fetchUsers() {
            const users = await sendRequest('/User/GetAllUsers', 'GET');
            if (users) {
                updateUsersList(users);
            }
        }

        function updateUsersList(users) {
            const tbody = document.querySelector('tbody');
            tbody.innerHTML = '';

            users.forEach(user => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                        <td>${user.id}</td>
                        <td>${user.username}</td>
                        <td>${user.email}</td>
                        <td>${user.rol}</td>
                        <td>${user.status === 1 ? 'Activo' : 'Inactivo'}</td>
                        <td>
                            <button onclick="fillUpdateForm(${user.id}, '${user.username}', '${user.email}', '${user.rol}')">Actualizar</button>
                            <button onclick="toggleStatus(${user.id}, ${user.status === 1 ? 0 : 1})">${user.status === 1 ? 'Desactivar' : 'Activar'}</button>
                        </td>
                    `;
                tbody.appendChild(tr);
            });
        }

        async function createUser(user) {
            const result = await sendRequest('/User/CreateUser', 'POST', user);
            if (result) {
                alert('Usuario creado exitosamente');
                location.reload();
            }
        }

        async function deleteUser(id) {
            if (confirm('¿Estás seguro de que quieres eliminar este usuario?')) {
                const result = await sendRequest('/User/DeleteUser', 'POST', { id: id });
                if (result) {
                    alert('Usuario eliminado');
                    location.reload();
                }
            }
        }

        function fillUpdateForm(id, username, email, rol) {
            document.getElementById('updateUserForm').style.display = 'block';
            document.getElementById('updateUsername').value = username;
            document.getElementById('updateEmail').value = email;
            document.getElementById('updateRol').value = rol;
            document.getElementById('updateUserForm').onsubmit = function (e) {
                e.preventDefault();
                updateUser(id);
            };
        }

        async function updateUser(id) {
            const user = {
                id: id,
                username: document.getElementById('updateUsername').value,
                email: document.getElementById('updateEmail').value,
                rol: document.getElementById('updateRol').value
            };
            const result = await sendRequest('/User/UpdateUser', 'POST', user);
            if (result) {
                alert('Usuario actualizado exitosamente');
                location.reload();
            }
        }

        async function toggleStatus(id, status) {
            const result = await sendRequest('/User/ChangeUserStatus', 'POST', { userid: id });
            if (result) {
                alert('Estado del usuario actualizado');
                location.reload();
            }
        }

        document.getElementById('createUserForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const user = {
                username: document.getElementById('username').value,
                password: document.getElementById('password').value,
                email: document.getElementById('email').value,
                rol: document.getElementById('rol').value
            };

            createUser(user);
        });

        function backHome() {
            window.location.href = '/Home/Home';
        }

        // Agregar el evento al botón de cerrar sesión
        document.getElementById('homebtn').addEventListener('click', backHome);

        document.addEventListener('DOMContentLoaded', fetchUsers);
    </script>
</body>
</html>
