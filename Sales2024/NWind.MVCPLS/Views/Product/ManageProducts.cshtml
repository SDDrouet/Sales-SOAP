@model List<Entities.Products>

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Gestionar Productos</title>
    <style>
        /* Reset de márgenes y padding */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Body */
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            background-color: #f4f4f4;
            color: #333;
            padding: 20px;
        }

        /* Contenedor principal */
        div {
            margin: 20px 0;
        }

        /* Estilos de encabezados */
        h1, h2 {
            color: #333;
            margin-bottom: 15px;
        }

        /* Estilo para formularios */
        form {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

            form div {
                margin-bottom: 15px;
            }

            form label {
                display: block;
                font-weight: bold;
                margin-bottom: 5px;
            }

            form input, form select, form button {
                width: 100%;
                padding: 10px;
                font-size: 1rem;
                border: 1px solid #ddd;
                border-radius: 4px;
            }

            form button {
                background-color: #007bff;
                color: #fff;
                border: none;
                cursor: pointer;
            }

                form button:hover {
                    background-color: #0056b3;
                }

        /* Estilo para botones */
        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }

            button:hover {
                background-color: #0056b3;
            }

        /* Estilo para las tablas */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: #fff;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 10px;
            text-align: left;
        }

        th {
            background-color: #f4f4f4;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        /* Navegación */
        nav ul {
            list-style: none;
            padding: 0;
        }

            nav ul li {
                display: inline;
                margin-right: 20px;
            }

                nav ul li a {
                    text-decoration: none;
                    color: #007bff;
                    font-weight: bold;
                }

                    nav ul li a:hover {
                        text-decoration: underline;
                    }

        /* Mensajes de éxito / error */
        p.success, p.error {
            font-size: 1.2rem;
            margin-top: 20px;
            text-align: center;
        }

        p.success {
            color: green;
        }

        p.error {
            color: red;
        }

        /* Estilo para el centro de la página (verificación) */
        div[style="text-align: center; margin-top: 50px;"] {
            margin-top: 50px;
            text-align: center;
        }

        /* Botón de cierre de sesión */
        #logoutButton, #homebtn {
            background-color: #f44336;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            cursor: pointer;
            margin-top: 20px;
        }

            #logoutButton:hover, #homebtn:hover {
                background-color: #d32f2f;
            }

        /* Ajustes para formularios con estilos condicionales */
        input:focus, select:focus, button:focus {
            outline: none;
            border-color: #007bff;
        }

        /* Ajustes para el login */
        #loginForm input[type="submit"] {
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 10px;
            cursor: pointer;
        }

            #loginForm input[type="submit"]:hover {
                background-color: #218838;
            }

        #loginForm div {
            margin-bottom: 15px;
        }

        #loginForm input {
            width: 100%;
            padding: 10px;
        }

        /* Estilos para el formulario de actualización de usuario */
        #updateUserForm {
            display: none;
        }

        /* Estilo de enlace */
        a {
            color: #007bff;
            text-decoration: none;
        }

            a:hover {
                text-decoration: underline;
            }
    </style>
</head>
<body>
    <!-- Botón para cerrar sesión -->
    <button id="homebtn">Regresar a Inicio</button>

    <h1>Gestionar Productos</h1>

    <!-- Crear nuevo producto -->
    <h2>Crear Nuevo Producto</h2>
    <form id="createProductForm">
        <div>
            <label>Nombre del Producto:</label>
            <input type="text" id="productName" required />
        </div>

        <div>
            <label>Categoría (ID):</label>
            <input type="number" id="categoryId" required />
        </div>

        <div>
            <label>Precio Unitario:</label>
            <input type="number" id="unitPrice" step="0.01" required />
        </div>

        <div>
            <label>Unidades en Stock:</label>
            <input type="number" id="unitInStock" required />
        </div>

        <button type="submit">Crear Producto</button>
    </form>

    <hr />

    <!-- Actualizar producto -->
    <h2>Actualizar Producto</h2>
    <form id="updateProductForm" style="display:none;">
        <div>
            <label>Nombre del Producto:</label>
            <input type="text" id="updateProductName" required />
        </div>

        <div>
            <label>Categoría (ID):</label>
            <input type="number" id="updateCategoryId" required />
        </div>

        <div>
            <label>Precio Unitario:</label>
            <input type="number" id="updateUnitPrice" step="0.01" required />
        </div>

        <div>
            <label>Unidades en Stock:</label>
            <input type="number" id="updateUnitInStock" required />
        </div>

        <button type="submit">Actualizar Producto</button>
    </form>

    <hr />

    <!-- Listar productos -->
    <h2>Lista de Productos</h2>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Categoría</th>
                <th>Precio Unitario</th>
                <th>Unidades en Stock</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Count > 0)
            {
                foreach (var product in Model)
                {
                    <tr>
                        <td>@product.id</td>
                        <td>@product.productName</td>
                        <td>@product.categoryId</td>
                        <td>@product.unitPrice</td>
                        <td>@product.unitInStock</td>
                        <td>
                            <!-- Editar producto -->
                            <button onclick="fillUpdateForm(@product.id, '@product.productName', @product.categoryId, @product.unitPrice, @product.unitInStock)">Actualizar</button>

                            <!-- Eliminar producto -->
                            <button onclick="deleteProduct(@product.id)">Eliminar</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6">No hay productos disponibles</td>
                </tr>
            }

        </tbody>
    </table>

    <hr />

    <script>
        const authToken = sessionStorage.getItem('authToken');

        function sessionControl() {
            if (authToken == null || authToken == "") {
                window.location.href = '/';
            }
        }

        document.addEventListener('DOMContentLoaded', sessionControl);

        async function sendRequest(url, method, data = null) {
            const headers = {
                'Content-Type': 'application/json',
                'Authorization': authToken ? 'Bearer ' + authToken : ''
            };

            const options = { method: method, headers: headers };

            if (data) {
                options.body = JSON.stringify(data);
            }

            try {
                const response = await fetch(url, options);
                if (!response.ok) {
                    throw new Error('Error al realizar la solicitud');
                }
                return await response.json();
            } catch (error) {
                console.error(error);
                alert(error.message);
                return null;
            }
        }

        function updateProductsList(products) {
            const tbody = document.querySelector('tbody');
            tbody.innerHTML = '';

            products.forEach(product => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                            <td>${product.id}</td>
                            <td>${product.productName}</td>
                            <td>${product.categoryId}</td>
                            <td>${product.unitPrice}</td>
                            <td>${product.unitInStock}</td>
                            <td>
                                <button onclick="fillUpdateForm(${product.id}, '${product.productName}', ${product.categoryId}, ${product.unitPrice}, ${product.unitInStock})">Actualizar</button>
                                <button onclick="deleteProduct(${product.id})">Eliminar</button>
                            </td>
                        `;
                tbody.appendChild(tr);
            });
        }

        async function fetchProducts() {
            const result = await sendRequest('/Product/GetAllProducts', 'GET');
            if (result) {
                updateProductsList(result);
            }
        }

        async function createProduct(product) {
            const result = await sendRequest('/Product/CreateProduct', 'POST', product);
            if (result) {
                alert('Producto creado exitosamente');
                location.reload();
            }
        }

        document.getElementById('createProductForm').addEventListener('submit', function (e) {
            e.preventDefault();

            const product = {
                productName: document.getElementById('productName').value,
                categoryId: parseInt(document.getElementById('categoryId').value),
                unitPrice: parseFloat(document.getElementById('unitPrice').value),
                unitInStock: parseInt(document.getElementById('unitInStock').value)
            };

            createProduct(product);
        });

        async function deleteProduct(id) {
            if (confirm('¿Estás seguro de que quieres eliminar este producto?')) {
                const result = await sendRequest('/Product/DeleteProduct', 'POST', { id: id });
                if (result) {
                    location.reload();
                }
            }
        }

        function fillUpdateForm(id, productName, categoryId, unitPrice, unitInStock) {
            document.getElementById('updateProductForm').style.display = 'block';
            document.getElementById('updateProductName').value = productName;
            document.getElementById('updateCategoryId').value = categoryId;
            document.getElementById('updateUnitPrice').value = unitPrice;
            document.getElementById('updateUnitInStock').value = unitInStock;
            document.getElementById('updateProductForm').onsubmit = function (e) {
                e.preventDefault();
                updateProduct(id);
            };
        }

        async function updateProduct(id) {
            const product = {
                id: id,
                productName: document.getElementById('updateProductName').value,
                categoryId: parseInt(document.getElementById('updateCategoryId').value),
                unitPrice: parseFloat(document.getElementById('updateUnitPrice').value),
                unitInStock: parseInt(document.getElementById('updateUnitInStock').value)
            };

            const result = await sendRequest('/Product/UpdateProduct', 'POST', product);
            if (result) {
                alert('Producto actualizado exitosamente');
                location.reload();
            }
        }

        function backHome() {
            window.location.href = '/Home/Home';
        }

        // Agregar el evento al botón de cerrar sesión
        document.getElementById('homebtn').addEventListener('click', backHome);

        document.addEventListener('DOMContentLoaded', fetchProducts);
    </script>

</body>
</html>
